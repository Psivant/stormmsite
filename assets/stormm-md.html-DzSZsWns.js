import{_ as e,c as t,o as n,b as i}from"./app-D3GTcc7E.js";const a={},o=i('<h1 id="molecular-dynamics-in-stormm" tabindex="-1"><a class="header-anchor" href="#molecular-dynamics-in-stormm"><span>Molecular Dynamics in STORMM</span></a></h1><p>The executables dynamics.stormm and dynamics.stormm.cuda are compiled with the build: each engine works in the manner of backend programs distributed with AMBER, NAMD, or GROMACS, handling the entire dynamics cycle from topology and input coordinate reading to trajectory writing.</p><h2 id="implicit-solvent-dynamics" tabindex="-1"><a class="header-anchor" href="#implicit-solvent-dynamics"><span>Implicit Solvent Dynamics</span></a></h2><p>STORMM can apply any of the AMBER Generalize Born models to mimic the reaction field of aqueous solvent.</p><h2 id="explicit-solvent-dynamics" tabindex="-1"><a class="header-anchor" href="#explicit-solvent-dynamics"><span>Explicit Solvent Dynamics</span></a></h2><p>Simulations with explicit representations of solvent are still in development. Progress along these lines is detailed in our <a href="https://pubs.aip.org/aip/jcp/article/161/3/032501/3303330/STORMM-Structure-and-topology-replica-molecular" target="_blank" rel="noopener noreferrer">2024 paper in the Journal of Chemical Physics</a>. The neighbor list scheme mentioned in the paper has seen further development and appears to be a viable path to a world-class engine. In addition to efficient simulations, the neighbor list will give developers easy access to the exact sector that any particle occupies at any given time step, a way to enumerate all neighboring particles, and a simple function for calculating whether two atoms share a non-bonded exclusion that is fast enough to be placed in the non-bonded inner loop (STORMM invokes it for each pairwise interaction).</p><h2 id="input-controls" tabindex="-1"><a class="header-anchor" href="#input-controls"><span>Input controls</span></a></h2><p>STORMM input files are designed to resemble <a href="https://ambermd.org" target="_blank" rel="noopener noreferrer">AMBER&#39;s</a> block structure based on Fortran namelists. STORMM uses a custom emulator written in C++ to interpret an enhanced input block syntax, allowing users to specify some keywords multiple times and for the creation of subkeys in a brace-enclosed syntax reminiscent of XML. As with other STORMM executables, the complete list of available input blocks is displayed by running the program with no input arguments, or by requesting <code>--help</code> on the command line. A brief description of each control block&#39;s purpose is provided next to its title in a table formatted to the terminal. To see more about the contents of each control block, users can get a complete list of all keywords, with descriptions, by typing the name of the control block as the sole argument after the name of the executable on the command line.</p><p>An important new feature of STORMM inputs is the <code>&amp;amp;files</code> block, which sweeps up many of the AMBER command line input arguments while providing a means for users to specify multiple input topologies and coordinate files in a manageable format. The block&#39;s most important keyword is <code>-sys</code> (system), a struct-type input with multiple subkeys that will be familiar to AMBER users: <code>-p</code> for the topology, <code>-c</code> for the input coordinates file (which can also be a trajectory), <code>-x</code> for the output trajectory, and <code>-r</code> for the checkpoint file.</p><h2 id="example-input" tabindex="-1"><a class="header-anchor" href="#example-input"><span>Example Input</span></a></h2><h2 id="output-details" tabindex="-1"><a class="header-anchor" href="#output-details"><span>Output Details</span></a></h2><p>&#39;Diagnostic&#39; output, including the basic run parameters, a summary of system details, and familiar energy components printed for each time step, are provided in a single report file comprising all systems in the run.</p><p>Some outputs of the dynamics program are still under development: while STORMM can run dynamics with starting structures and molecular mechanics parameters, checkpointing is not yet ready and the only trajectory output format is AMBER&#39;s .crd (<code>8.3f</code>) ASCII output.</p>',13),s=[o];function l(r,c){return n(),t("div",null,s)}const d=e(a,[["render",l],["__file","stormm-md.html.vue"]]),m=JSON.parse('{"path":"/stormm-md.html","title":"Molecular Dynamics in STORMM","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Implicit Solvent Dynamics","slug":"implicit-solvent-dynamics","link":"#implicit-solvent-dynamics","children":[]},{"level":2,"title":"Explicit Solvent Dynamics","slug":"explicit-solvent-dynamics","link":"#explicit-solvent-dynamics","children":[]},{"level":2,"title":"Input controls","slug":"input-controls","link":"#input-controls","children":[]},{"level":2,"title":"Example Input","slug":"example-input","link":"#example-input","children":[]},{"level":2,"title":"Output Details","slug":"output-details","link":"#output-details","children":[]}],"git":{"updatedTime":1747323475000},"filePathRelative":"stormm-md.md"}');export{d as comp,m as data};
