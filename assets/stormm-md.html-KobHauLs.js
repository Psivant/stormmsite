import{_ as e,c as n,o as a,b as s}from"./app-Ct8qdDt4.js";const i={},t=s(`<h1 id="molecular-dynamics-in-stormm" tabindex="-1"><a class="header-anchor" href="#molecular-dynamics-in-stormm"><span>Molecular Dynamics in STORMM</span></a></h1><p>The executables <strong>dynamics.stormm</strong> and <strong>dynamics.stormm.cuda</strong> are compiled with the build: each engine works in the manner of backend programs distributed with AMBER, NAMD, or GROMACS, handling the entire dynamics cycle from topology and input coordinate reading to trajectory writing.</p><h2 id="implicit-solvent-dynamics" tabindex="-1"><a class="header-anchor" href="#implicit-solvent-dynamics"><span>Implicit Solvent Dynamics</span></a></h2><p>STORMM can apply any of the AMBER Generalize Born models to mimic the reaction field of aqueous solvent.</p><h2 id="explicit-solvent-dynamics" tabindex="-1"><a class="header-anchor" href="#explicit-solvent-dynamics"><span>Explicit Solvent Dynamics</span></a></h2><p>Simulations with explicit representations of solvent are still in development. Progress along these lines is detailed in our <a href="https://pubs.aip.org/aip/jcp/article/161/3/032501/3303330/STORMM-Structure-and-topology-replica-molecular" target="_blank" rel="noopener noreferrer">2024 paper in the Journal of Chemical Physics</a>. The neighbor list scheme mentioned in the paper has seen further development and appears to be a viable path to a world-class engine. In addition to efficient simulations, the neighbor list will give developers easy access to the exact sector that any particle occupies at any given time step, a way to enumerate all neighboring particles, and a simple function for calculating whether two atoms share a non-bonded exclusion that is fast enough to be placed in the non-bonded inner loop (STORMM invokes it for each pairwise interaction).</p><h2 id="input-controls" tabindex="-1"><a class="header-anchor" href="#input-controls"><span>Input controls</span></a></h2><p>STORMM input files are designed to resemble <a href="https://ambermd.org" target="_blank" rel="noopener noreferrer">AMBER&#39;s</a> block structure based on Fortran namelists. STORMM uses a custom emulator written in C++ to interpret an enhanced input block syntax, allowing users to specify some keywords multiple times and for the creation of subkeys in a brace-enclosed syntax reminiscent of XML. As with other STORMM executables, the complete list of available input blocks is displayed by running the program with no input arguments, or by requesting <code>--help</code> on the command line. A brief description of each control block&#39;s purpose is provided next to its title in a table formatted to the terminal. To see more about the contents of each control block, users can get a complete list of all keywords, with descriptions, by typing the name of the control block as the sole argument after the name of the executable on the command line.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&gt;&gt; ./StormmBuild/apps/Dyna/dynamics.stormm.cuda minimize</span>
<span class="line"></span>
<span class="line">+-------------------------------------------------------------------------------------------------+</span>
<span class="line">&amp;minimize: Wraps directives needed to carry out energy minimization of a molecular system guided</span>
<span class="line">           by an energy surface based on a force field.</span>
<span class="line"></span>
<span class="line"> Keywords [ type, default value ]:</span>
<span class="line">+-------------------------------------------------------------------------------------------------+</span>
<span class="line"> + cut             : [   REAL,     10.0] The inter-particle distance at which to begin neglecting</span>
<span class="line">                     pairwise, particle-particle interactions, in units of Angstroms.  If given,</span>
<span class="line">                     this unifying parameter will take precedence over separate specifications for</span>
<span class="line">                     the electrostatic or Lennard-Jones (van-der Waals) cutoffs.</span>
<span class="line"></span>
<span class="line"> + maxcyc          : [INTEGER,      200] Maximum number of line minimization cycles to pursue.</span>
<span class="line"></span>
<span class="line"> + cdcyc           : [INTEGER,       25] Number of clash-damping optimization steps to perform, to</span>
<span class="line">                     mitigate the effects of hard collisions between particles at the outset of</span>
<span class="line">                     structure relaxation.</span>
<span class="line"></span>
<span class="line"> + ntpr            : [INTEGER,        0] Interval at which to report energy diagnostics for the</span>
<span class="line">                     minimization run, akin to the mdout results in Amber&#39;s sander and pmemd</span>
<span class="line">                     programs.  The default of 0 suppresses output except at the outset of the</span>
<span class="line">                     run.</span>
<span class="line">(... additional output clipped...)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An important new feature of STORMM inputs is the <code>&amp;files</code> block, which sweeps up many of the AMBER command line input arguments while providing a means for users to specify multiple input topologies and coordinate files in a manageable format. The block&#39;s most important keyword is <code>-sys</code> (system), a struct-type input with multiple subkeys that will be familiar to AMBER users: <code>-p</code> for the topology, <code>-c</code> for the input coordinates file (which can also be a trajectory), <code>-x</code> for the output trajectory, and <code>-r</code> for the checkpoint file.</p><h2 id="example-input" tabindex="-1"><a class="header-anchor" href="#example-input"><span>Example Input</span></a></h2><p>The following will specify a short molecular dynamics run on three copies of the Trp-cage system, one copy of dihydrofolate reductase, and three copies of a small drug molecule based on the second (second of two) <a href="https://doi.org/10.1002/prot.20033" target="_blank" rel="noopener noreferrer">Onufriev / Bashford / Case Generalized Born solvent model</a>. The environment variable <code>$STORMM_SOURCE</code> should be replaced with the raw source path in order for the program to find the input files, distributed with the STORMM code base.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&amp;files</span>
<span class="line">  -sys { -p \${STORMM_SOURCE}/test/Topology/trpcage.top</span>
<span class="line">         -c \${STORMM_SOURCE}/test/Trajectory/trpcage.inpcrd</span>
<span class="line">         -label TrpCage -n 3 }</span>
<span class="line">  -sys { -p \${STORMM_SOURCE}/test/Topology/dhfr_cmap.top</span>
<span class="line">         -c \${STORMM_SOURCE}/test/Trajectory/dhfr_cmap.inpcrd</span>
<span class="line">         -label DHFR -n 1 }</span>
<span class="line">  -sys { -p \${STORMM_SOURCE}/test/Topology/drug_example_iso.top</span>
<span class="line">         -c \${STORMM_SOURCE}/test/Trajectory/drug_example_iso.inpcrd</span>
<span class="line">         -label Drug -n 3 }</span>
<span class="line">  -o dyna.m</span>
<span class="line">&amp;end</span>
<span class="line"></span>
<span class="line">&amp;minimize</span>
<span class="line">  cdcyc 20,  ncyc 40,  maxcyc 60,</span>
<span class="line">  ntpr 1,</span>
<span class="line">&amp;end</span>
<span class="line"></span>
<span class="line">&amp;dynamics</span>
<span class="line">  nstlim = 200000,  ntpr = 500,  ntwx = 0, dt = 1.0,</span>
<span class="line">  ntt = 3,</span>
<span class="line">  rigid_geom on,</span>
<span class="line">  temperature = { tempi 100.0, temp0 300.0, -label TrpCage },</span>
<span class="line">  temperature = { tempi 100.0, temp0 400.0, -label DHFR },</span>
<span class="line">  temperature = { tempi 300.0, temp0 200.0, -label Drug },</span>
<span class="line">  tevo_start = 25000, tevo_end = 75000,</span>
<span class="line">  tcache_depth 1,</span>
<span class="line">&amp;end</span>
<span class="line"></span>
<span class="line">&amp;solvent</span>
<span class="line">  igb = 5,</span>
<span class="line">&amp;end</span>
<span class="line"></span>
<span class="line">&amp;report</span>
<span class="line">  syntax = Matlab,</span>
<span class="line">  energy bond,</span>
<span class="line">  energy angle,</span>
<span class="line">  energy dihedral,</span>
<span class="line">  energy total,</span>
<span class="line">  state temperature,</span>
<span class="line">&amp;end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, each unique molecular system is given its own label group, and the temperatures for each system are controlled by input in the <code>&amp;dynamics</code> control block. Unique (<code>ntt = 3</code>, Langevin) thermostats for each system maintain the temperature at <code>tempi</code> until <code>tevo_start</code> (the start of temperature evolution) steps have passed, then implement a linear shift towards the equilibrium temperature <code>temp0</code> to be maintained after <code>tevo_end</code> steps have passed.</p><p>For convenience, the above input file is <a href="./assets/dyna.in" download>here</a>. With the relevant coordinate and topologies wrapped inside the <code>&amp;files</code> namelist, the command to run the input with the GPU-enabled engine is:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">\${STORMM_BUILD}/apps/Dyna/dynamics.stormm.cuda -O -i dyna.in</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="output-details" tabindex="-1"><a class="header-anchor" href="#output-details"><span>Output Details</span></a></h2><p>&#39;Diagnostic&#39; output, including the basic run parameters, a summary of system details, and familiar energy components printed for each time step, are provided in a single report file comprising all systems in the run. In general, STORMM output reports are arranged with numbers in tabulated form, which helps to reduce the overall size of the files by grouping similar numbers under a single column or row description. The tabulated form is also arranged such that narrative describing each table will be locked behind some sort of comment symbol, if available, while the data itself is exposed as raw numbers but enclosed within some bracket syntax to be amenable to one of several popular matrix or data processing packages. Output options include <code>.json</code> (no narration, as comments are not supported in the format), <code>.m</code> (matrix packages like <a href="https://www.mathworks.com/products/matlab.html" target="_blank" rel="noopener noreferrer">Matlab</a> and <a href="https://octave.org" target="_blank" rel="noopener noreferrer">Octave</a>), and <code>.py</code> (<a href="https://numpy.org" target="_blank" rel="noopener noreferrer">Numpy</a> or <a href="https://matplotlib.org" target="_blank" rel="noopener noreferrer">MatPlotLib</a> data), among others. The STORMM report file is then comprehensible to a human being or admissible as a script to an external plotting or matrix analysis toolkit.</p><p>Many outputs of the dynamics program and other applications are still under development: while STORMM can run dynamics with starting structures and molecular mechanics parameters, checkpointing is not yet ready and the only trajectory output format is AMBER&#39;s .crd (<code>8.3f</code>) ASCII output.</p><h2 id="example-output" tabindex="-1"><a class="header-anchor" href="#example-output"><span>Example Output</span></a></h2><p>This <a href="./assets/dyna.m" download>report</a> is produced by <strong>dynamics.stormm.cuda</strong> running the above input. It is the equivalent of <code>mdout</code> from the AMBER sander or pmemd engines, displaying similar readouts from the energy decomposition albeit in a different, more compact format that assumes the user would like such information tabulated. The output from STORMM collects results from all systems which were run as part of the same calculation. While it might not be sensible to run the example inputs and compare them at once, the possibilities are clear. The report file is a script that can be read by a human, or submitted as input to Matlab or Octave. All information from the standard MD diagnostics is then available in a matrix package for further analysis.</p><p>Some notes:</p><ul><li>The program will warn the user that atomic numbers are being inferred from masses. This is because the input topology does not contain all of the information that STORMM would prefer to have about the system. Other warnings might be produced if STORMM needed to insert or override the topology&#39;s atomic radii for Generalized Born calculations.</li><li>Specifying <code>energy angle</code> and <code>energy dihedral</code> in the input spans several energetic terms that STORMM is aware of. The <code>angle</code> corresponds to both harmonic bending terms as well as Urey-Bradley stretching terms which are present in the CHARMM forcefield that describes the DHFR system. Likewise, <code>dihedral</code> terms include proper and improper cosine-based dihedrals as well as CHARMM harmonic improper dihedrals.</li><li>The opening comment blocks of the file describe the origins of each system, which are numbered for convenience in the output. Table headers of each energy term list the system number for each column.</li><li>The first column of each table provides the step number at which the energy quantity was measured for any given system.</li></ul>`,23),l=[t];function r(o,c){return a(),n("div",null,l)}const d=e(i,[["render",r],["__file","stormm-md.html.vue"]]),m=JSON.parse('{"path":"/stormm-md.html","title":"Molecular Dynamics in STORMM","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Implicit Solvent Dynamics","slug":"implicit-solvent-dynamics","link":"#implicit-solvent-dynamics","children":[]},{"level":2,"title":"Explicit Solvent Dynamics","slug":"explicit-solvent-dynamics","link":"#explicit-solvent-dynamics","children":[]},{"level":2,"title":"Input controls","slug":"input-controls","link":"#input-controls","children":[]},{"level":2,"title":"Example Input","slug":"example-input","link":"#example-input","children":[]},{"level":2,"title":"Output Details","slug":"output-details","link":"#output-details","children":[]},{"level":2,"title":"Example Output","slug":"example-output","link":"#example-output","children":[]}],"git":{"updatedTime":1748857223000},"filePathRelative":"stormm-md.md"}');export{d as comp,m as data};
